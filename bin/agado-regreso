#! /bin/sh

## Import tiered configuration settings
  CF=agado-regreso.conf
  [ -r /usr/etc/${CF} ] && source /usr/etc/${CF}
  [ -r /etc/${CF} ] && source /etc/${CF}
  [ -r ./${CF} ] && source ./${CF}

## Source and use helper functions
   for HF in os provo raporto transporto
     do
	[ -r ${functionDir}/helper/${HF} ] && source ${functionDir}/helper/${HF}
	[ -r ./helper/${HF} ] && source ./helper/${HF}
     done
   prep

## Usage 

  # invocation, should be run as root (or via sudo)
  if [ "$UID" != "0" ]
    then
        echo "Requires root (or sudo) privileges to run $0" >&2
        exit 1
  fi

  # set default scope
  if [ $# -eq 1 ]
    then
	scopeID="${1}"
    else
	scopeID=$( uname -r )
        kernelVER=${scopeID%%-default}
	kernelPKG=$( rpm -aq | grep kernel-default | sort -gr| head -1 )

	# validate kernel rpm is the one running
	if $( ! echo ${kernelPKG} | grep ${kernelVER} >/dev/null 2>&1 )
	  then
		kolekti
		systemctl reboot && exit 0
	fi
  fi
  scopeSuf="${scopeID}"

## run respective test cases

  # mmtests
  [ $( echo ${mmtests} | tr '[:upper:]' '[:lower:]' ) = "y" ] && {
	if [ -d ${mmtestsDir} ]
	  then
		  mmtests_tc
	  else
		echo "Try git clone mmtests, adjust configuration for location"
		exit 1
	fi
  }

  # phoronix
  [ $( echo ${phoronix} | tr '[:upper:]' '[:lower:]' ) = "y" ] && {
	if [ -d ${phoronixDir} ]
	  then
		  phoronix_tc
	  else
		echo "Try git clone phoronix, adjust configuration for location"
		exit 1
	fi
  }

  # next test suite (TBD)

## prepare system, with updates, for next test runs

  kernelID=$( uname -r )
  kernelVER=${kernelID%%-default}
  kernelPKG=$( rpm -aq | grep kernel-default | grep ${kernelVER} )
  kernelBN=${kernelPKG%%-${kernelVER}*}

  # prepare for maintenance updates
    kernelTS=$( rpm -aqi ${kernelBN} | grep "^Source Timestamp:" | sort -nr | head -1 | awk '{print $3}' )

    [ "${scopeSuf}" = "$( uname -r )" ] && {
	echo ${kernelTS} > ${cacheDir}/KERNELTIMESTAMP
    }

  # apply maintenance updates in timerange of current kernel

    # gate maintenance update types
      MU=""
      [ $( echo ${muSec} | tr '[:upper:]' '[:lower:]' ) = "y" ] && MU+=" security "
      [ $( echo ${muRec} | tr '[:upper:]' '[:lower:]' ) = "y" ] && MU+=" recommended "

    # iterate through maintenance updates
    scopeNEXT=""
    [ -n "${MU}" ] && {

	[ ! -e ${cacheDir}/lastSCOPE-${kLast} ] && {

		for muType in ${MU}
		  do
			kernelTS=$( cat ${cacheDir}/KERNELTIMESTAMP )
			scopeNEXT="$( uname -r )-mu-${muType}-${kernelTS}"
			[ -s ${logDir}/${scopeNEXT} ] || {
				zypper lp --date ${kernelTS} --category ${muType} > ${logDir}/${scopeNEXT} && \
				unset ${RC}
				zpm="zypper patch -y --date ${kernelTS} --category ${muType}"
				RC=$(${zpm} >> ${logDir}/${scopeNEXT})
				[ ${RC} -eq 103 ] && $(${zpm} >> ${logDir}/${scopeNEXT})
				echo ${scopeNEXT} > ${cacheDir}/SCOPE
				kolekti
				systemctl reboot && exit 0
			}
			scopeNEXT=""
		  done
	}
    }

  # apply kernel upgrade
    kernelNEXT=""

    # if configured, check for kernel version starting point
    [ -n "${kStart}" ] && {

	# verify available
	$( zypper se -s --match-exact ${kernelBN} | grep ${kStart} >/dev/null 2>&1 ) || {
		echo "Unable to find or install ${kernelBN} ${kStart}"
		exit 1
	}

	# capture starting state
	$( echo ${kernelPKG} | grep ${kStart} >/dev/null 2>&1 ) && \
		touch ${cacheDir}/startSCOPE-${kStart}

	# prep for install
	[ ! -e ${cacheDir}/startSCOPE-${kStart} ] && kernelNEXT="${kStart}"

    }

    # if configured, check for kernel version finish point
    [ -n "${kLast}" ] && {

	# verify available
	$( zypper se -s --match-exact ${kernelBN} | grep "${kLast}" >/dev/null 2>&1 ) || {
		echo "Unable to find or install ${kernelBN} ${kLast}"
		exit 1
	}

	# capture finish state
	$( echo ${kernelPKG} | grep ${kLast} >/dev/null 2>&1 ) && \
		touch ${cacheDir}/lastSCOPE-${kLast}

    }

    # iterate through kernel version set
    [ -z "${kernelNEXT}" ] && \
    for kernelUP in $( zypper se -s --match-exact ${kernelBN} | grep -v "srcpackage" 2>/dev/null | awk -F'|' '{print $4}' )
      do

	echo ${kernelUP}
	[ "${kernelUP}" = "Version" ] && continue

	if $( echo ${kernelUP} | grep ${kernelVER} >/dev/null 2>&1 )
	  then
		break
	  else
		if [ -e ${cacheDir}/lastSCOPE-${kLast} ]
		  then
			kernelNEXT=""
			break
		  else
			kernelNEXT=${kernelUP}
		fi
	fi
      done

  # gate maintenance update types
    [ $( echo ${kUp} | tr '[:upper:]' '[:lower:]' ) = "y" ] &&  {
	[ -z ${scopeNEXT} ] && [ -n "${kernelNEXT}" ] && {
		zypper install -y ${kernelBN}=${kernelNEXT} > ${logDir}/${kernelNEXT} && \
		rm -f ${cacheDir}/KERNELTIMESTAMP 2>/dev/null && \
  		rm -f ${cacheDir}/SCOPE 2>/dev/null && \
  		rm -f ${cacheDir}/TESTCASE 2>/dev/null && \
		kolekti
  		systemctl reboot && exit 0
	}
    }

exit 0
